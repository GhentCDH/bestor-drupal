<?php

use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Render\Markup;
use Drupal\file\Entity\File;
use Drupal\node\NodeInterface;

function customTranslations() {
    return [
        'published_label' => [
            'en' => 'published at',
            'fr' => 'publié à',
            'nl' => 'gepubliceerd op',
        ],
        'readmore_label' => [
            'en' => 'read more',
            'fr' => 'voir plus',
            'nl' => 'lees meer',
        ],
    ];
}

function bestor_form_alter(&$form, &$form_state, $form_id) {
    if($form['#id'] === 'views-exposed-form-search-page-1') {
        $form['#attributes']['class'][] = 'searchForm';
        $form['actions']['submit']['#attributes']['class'][] = 'icon-search';
        $form['actions']['submit']['#value'] = html_entity_decode("&#xe001;");
    }  
}

function bestor_preprocess_block(&$variables) {
    if($variables['base_plugin_id'] === 'language_block'){
        foreach($variables['content']['#links'] as $lang_id => $link){
            $variables['content']['#links'][$lang_id]['title'] = strtoupper($lang_id);
        }
    }   
}

function bestor_preprocess_node(&$variables) {
    if (isset($variables['node']) && $variables['node'] instanceof NodeInterface) {
        $node = $variables['node'];
        $node_fields = $node->getFields();

        // Bundle type variable
        $bundle_entity = \Drupal::entityTypeManager()->getStorage('node_type')->load($node->getType());
        if ($bundle_entity) {
            $variables['bundle_id'] = $node->bundle();
            $variables['bundle_title'] = $bundle_entity->label();
        }

        // Language & translation variables
        $langcode = \Drupal::languageManager()->getCurrentLanguage(LanguageInterface::TYPE_INTERFACE)->getId();
        if ($langcode) {
            $variables['langcode'] = $langcode;
            foreach (customTranslations() as $term => $translations) {
                $variables[$term] = isset($translations[$langcode]) ? $translations[$langcode] : null;
            }
        }

        // Image URL variable
        if($variables['teaser'] === true && $node->bundle() === 'article') {
            if($node->field_image->getValue() != null  && isset($node->field_image->getValue()[0]['target_id'])) {
                $image_url = \Drupal::service('file_url_generator')->generateAbsoluteString(File::load($node->field_image->getValue()[0]['target_id'])->getFileUri());
            }
            $variables['image_url'] = $image_url ?? null;
        }
        
        // Word count variable -> reading time
        $words = '';
        if(isset($node_fields['field_description']) && $node->field_description->getFieldDefinition()->getType() === 'entity_reference_revisions') {
            if($node_fields['field_description']->referencedEntities() > 0){
                foreach($node_fields['field_description']->referencedEntities() as $paragraph) {
                    if($paragraph->field_formatted_text->value){
                        $paragraph_text = strip_tags($paragraph->field_formatted_text->value);
                        $words = $words ? $words . ' ' . $paragraph_text : $paragraph_text; 
                    }
                }
            }
        } else if(isset($node_fields['body']) && $node->body->getFieldDefinition()->getType() === 'text_with_summary') {
            $words = strip_tags($node->body->value);
        } 
        $variables['reading_time'] = ceil(str_word_count($words) / 250);
    }   

    // Intro text variable
    if(isset($node_fields['field_summary']) && $node->field_summary->getValue() != null){
        $intro_text = strip_tags($node->field_summary->value);
    } else if(isset($node_fields['body']) && $node->body->getValue() != null){
        $intro_text = strip_tags($node->body->summary) ?? strip_tags($node->body->value);
    } else if(isset($node_fields['field_description']) && $node->field_description->getValue() != null){
        $intro_text = $words;
    } 
    $variables['intro_text'] = $intro_text ? implode(' ', array_slice(explode(' ', $intro_text), 0, 30)) : null;
}   

