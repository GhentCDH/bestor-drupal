<?php

use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Form\FormBuilderInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\node\Entity\Node;
use Drupal\views\ViewExecutable;
use Drupal\views\Views;
use Drupal\Component\Utility\NestedArray;
use Drupal\Core\Form\SubformState;
use Drupal\Core\Entity\EntityTypeManagerInterface;
use Drupal\Core\Entity\EntityFieldManagerInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
use Drupal\relationship_nodes\Plugin\Field\FieldType\ReferencingRelationshipItemList;
use Drupal\Core\Render\Element;
use Drupal\Core\Field\Plugin\Field\FieldWidget\MirrorSelectWidget;
use Drupal\relationship_nodes\Service\RelationshipInfoService;
use Drupal\relationship_nodes\Form\MirrorRelationshipEntityInlineForm;

global $relationship_node_bundle_prefix, $related_entity_fields, $relationship_type_field, $relationship_taxonomy_prefixes, $mirror_fields;
$config = \Drupal::config('relationship_nodes.settings');
$relationship_node_bundle_prefix = $config->get('relationship_node_bundle_prefix');
$related_entity_fields = $config->get('related_entity_fields');
$relationship_type_field = $config->get('relationship_type_field');
$relationship_taxonomy_prefixes = $config->get('relationship_taxonomy_prefixes');
$mirror_fields = $config->get('mirror_fields');

 
function relationship_nodes_entity_bundle_info_alter(&$bundles) {
  if (isset($bundles['node'])) {  
    foreach($bundles['node'] as $bundle_id => $bundle){ 
      $bundles['node'][$bundle_id]['relationship_info_bundle'] = \Drupal::service('relationship_nodes.relationship_info_service')->relationshipNodeInfo($bundle_id);
    }
  }
}


function relationship_nodes_entity_bundle_field_info_alter(&$fields, $entity_type, $bundle) {
  \Drupal::service('relationship_nodes.relationship_field_auto_adder')->addFields($fields, $entity_type, $bundle);
   

  if ($entity_type->id() === 'taxonomy_term') {
    $vocabulary_info = \Drupal::service('relationship_nodes.relationship_info_service')->relationshipTaxonomyVocabularyInfo($bundle, $fields);
    if(isset($vocabulary_info) && isset($vocabulary_info['relationtypevocabulary']) && isset($vocabulary_info['mirrorfieldtype'])){
      if($vocabulary_info['mirrorfieldtype'] == 'entity_reference_selfreferencing' && isset($fields[$vocabulary_info['mirrorfieldname']])){
        $fields[$vocabulary_info['mirrorfieldname']]->addConstraint(Relationship_nodesAvailableMirrorTermConstraint::class);
      }
    }
  } elseif($entity_type->id() === 'node') {
    $fields['submit_batch_id'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Submit Batch ID'))
      ->setDescription(t('On form submit a batch id is generated for new nodes. Multiple nodes can be created with the same form submit.'))
      ->setTranslatable(FALSE)
      ->setRevisionable(FALSE)
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', FALSE)
      ->setTranslatable(FALSE)
      ->setRevisionable(FALSE)
      ->setSettings([
        'default_value' => '',
        'max_length' => 255,
      ]);
  }
  return $fields;
} 

function relationship_nodes_entity_type_build(array &$entity_types) {
  if (isset($entity_types['node'])) {
    $entity_types['node']->setHandlerClass('inline_form', MirrorRelationshipEntityInlineForm::class);
  }
}

function relationship_nodes_node_presave(\Drupal\Core\Entity\EntityInterface $entity) {
  global $relationship_node_bundle_prefix, $related_entity_fields;
  if(strpos($entity->getType(), $relationship_node_bundle_prefix) === 0) {
    $related_entities = [];
    $node_storage = \Drupal::entityTypeManager()->getStorage('node');
    foreach($related_entity_fields as $related_entity_field){
      if($entity->$related_entity_field != null){
        if($entity->$related_entity_field->target_id != null){
          $related_entities[] = $node_storage->load($entity->$related_entity_field->target_id)->getTitle() ;
        }
      }
    }
    $entity->set('title','Relationship ' . implode(' - ', $related_entities));
  }
  dpm('presave' . $entity->getType());
}



function relationship_nodes_taxonomy_term_insert($entity) {
  setMirrorTermLink($entity, 'insert');
}


function relationship_nodes_taxonomy_term_update($entity) {
  setMirrorTermLink($entity, 'update');
}


function relationship_nodes_taxonomy_term_delete($entity) {
  setMirrorTermLink($entity, 'delete');
}


function setMirrorTermLink($entity, $hook){
  $relationship_type_vocabulary_info = \Drupal::service('relationship_nodes.relationship_info_service')->relationshipTaxonomyVocabularyInfo($entity->bundle());
  if(isset($relationship_type_vocabulary_info['relationtypevocabulary'])){
    $mirror_reference_field_type = isset($relationship_type_vocabulary_info['mirrorfieldtype']) ? $relationship_type_vocabulary_info['mirrorfieldtype'] : '';
    if($mirror_reference_field_type == 'entity_reference_selfreferencing'){
      global $mirror_fields;
      $mirror_reference_field = $mirror_fields['mirror_reference_field'];
      $mirror_id = $entity->$mirror_reference_field->target_id;
      $original_mirror_id = null;
      $term_id = null;
      if($hook != 'delete'){
        $term_id = $entity->id();
        if ($entity->original){
          $original_mirror_id = $entity->original->$mirror_reference_field->target_id;
        }
      } 
      if($mirror_id != $original_mirror_id){
        $taxonomy_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
        if($mirror_id == null){
          $original_mirror_term = $taxonomy_storage->load($original_mirror_id);
          if($original_mirror_term){
            $original_mirror_term->$mirror_reference_field->target_id = null;
            $original_mirror_term->save();
          }
        } else if ($original_mirror_id == null){
          $mirror_term = $taxonomy_storage->load($mirror_id);
          $mirror_term->$mirror_reference_field->target_id = $term_id;
          $mirror_term->save();
        } else{
          $original_mirror_term = $taxonomy_storage->load($original_mirror_id);
          $original_mirror_term->$mirror_reference_field->target_id = null;      
          $original_mirror_term->save();
          $mirror_term = $taxonomy_storage->load($mirror_id);
          $mirror_term->$mirror_reference_field->target_id = $term_id;
          $mirror_term->save();
        }
      }
    } 
  }
}



function relationship_nodes_form_alter(array &$form, FormStateInterface $form_state) {
 $form['#ief_element_submit'][] = [MirrorRelationshipEntityInlineForm::class, 'getCreatedRelationIds'];
 $form['actions']['submit']['#submit'][] = 'mymodule_custom_node_submit';
}


function mymodule_custom_node_submit(array &$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  dpm($form_state, 'testtest'); // zie bij storge.
}