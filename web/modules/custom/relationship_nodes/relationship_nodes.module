<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityForm;
use Drupal\Core\Entity\Entity\EntityFormDisplay;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\inline_entity_form\ElementSubmit;
use Drupal\relationship_nodes\Form\RelationExtendedEntityInlineForm;
use Drupal\relationship_nodes\Service\RelationshipInfoService;
use Drupal\relationship_nodes\Service\RelationSyncService;
use Drupal\relationship_nodes\Plugin\Field\FieldType\ReferencingRelationshipItemList;


function relationship_nodes_entity_bundle_field_info_alter(&$fields, $entity_type, $bundle) { 
  $type_id = $entity_type->id();
  if( $type_id === 'node'){
    \Drupal::service('relationship_nodes.relationship_field_auto_adder')->addFields($fields, $entity_type, $bundle);
  } elseif ($type_id === 'taxonomy_term') {
    $vocab_info = \Drupal::service('relationship_nodes.relationship_info_service')->getRelationVocabInfo($bundle, $fields);
    if(!empty($vocab_info)){
      if($vocab_info['mirror_field_type'] == 'entity_reference_selfreferencing' && isset($fields[$vocab_info['mirror_field_name']])){
        $fields[$vocab_info['mirror_field_name']]->addConstraint(available_mirror_term_constraint::class);
      }
    }
  }
  return $fields;
} 

function relationship_nodes_entity_type_alter(array &$entity_types) {
  if (isset($entity_types['node'])) {
    $entity_types['node']->addConstraint(valid_related_entities_constraint::class);
  }
}

function relationship_nodes_entity_bundle_info_alter(&$bundles) {
  $relation_bundles = [];
  if (isset($bundles['node'])) {  
    $relation_entity_validator = \Drupal::service('relationship_nodes.relation_entity_validator');
    foreach($bundles['node'] as $bundle_id => $bundle){ 
      if(!$relation_entity_validator->isValidRelationBundle($bundle_id, [], true)){
        $bundles['node'][$bundle_id]['relation_bundle'] = [];
        continue;
      } 
      $relation_bundles[] = $bundle_id; 
    }
  }
  if(!empty($relation_bundles)){
    $info_service = \Drupal::service('relationship_nodes.relationship_info_service');
    foreach($relation_bundles as $relation_bundle_id){
      $bundles['node'][$relation_bundle_id]['relation_bundle'] = $info_service->getRelationBundleInfo($relation_bundle_id);
    }
  }
}


function relationship_nodes_entity_type_build(array &$entity_types) {
  if (isset($entity_types['node'])) {
    $entity_types['node']->setHandlerClass('inline_form', RelationExtendedEntityInlineForm::class);
  }
}


function relationship_nodes_form_alter(array &$form, FormStateInterface $form_state) {
  $sync_service = \Drupal::service('relationship_nodes.relation_sync_service');
  $entity = $sync_service->getParentFormEntity($form_state);
  if(!$entity){
    return;
  }
  $relation_subforms = $sync_service->getRelationSubformFields($form_state);
  if(empty($relation_subforms)){
    return;
  }
  $sync_service->addParentFieldConfig($form, $relation_subforms);
  $form['actions']['submit']['#submit'][] = 'handle_relations';
  if ($entity->isNew()) {
    ElementSubmit::attach($form, $form_state);
    $form['#ief_element_submit'][] = [RelationSyncService::class, 'registerCreatedRelations'];
  }    
}


function handle_relations(array &$form, FormStateInterface $form_state) {
  $sync_service = \Drupal::service('relationship_nodes.relation_sync_service');
  $sync_service->dispatchToRelationHandlers($form, $form_state);
}