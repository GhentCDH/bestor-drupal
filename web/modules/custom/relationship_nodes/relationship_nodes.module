<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityForm;
use Drupal\Core\Entity\Entity\EntityFormDisplay;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\inline_entity_form\ElementSubmit;
use Drupal\relationship_nodes\Form\MirrorRelationshipEntityInlineForm;
use Drupal\relationship_nodes\Service\RelationshipInfoService;
use Drupal\relationship_nodes\Plugin\Field\FieldType\ReferencingRelationshipItemList;


function relationship_nodes_entity_bundle_field_info_alter(&$fields, $entity_type, $bundle) { 
  \Drupal::service('relationship_nodes.relationship_field_auto_adder')->addFields($fields, $entity_type, $bundle);
   $info_service = \Drupal::service('relationship_nodes.relationship_info_service');
  if ($entity_type->id() === 'taxonomy_term') {
    $vocabulary_info = $info_service->relationshipTaxonomyVocabularyInfo($bundle, $fields);
    if(isset($vocabulary_info) && isset($vocabulary_info['relationtypevocabulary']) && isset($vocabulary_info['mirrorfieldtype'])){
      if($vocabulary_info['mirrorfieldtype'] == 'entity_reference_selfreferencing' && isset($fields[$vocabulary_info['mirrorfieldname']])){
        $fields[$vocabulary_info['mirrorfieldname']]->addConstraint(Relationship_nodesAvailableMirrorTermConstraint::class);
      }
    }
  }
  return $fields;
} 



function relationship_nodes_entity_bundle_info_alter(&$bundles) {
  if (isset($bundles['node'])) {  
    foreach($bundles['node'] as $bundle_id => $bundle){ 
      $bundles['node'][$bundle_id]['relationship_info_bundle'] = \Drupal::service('relationship_nodes.relationship_info_service')->relationshipNodeInfo($bundle_id);
    }
  }
}



function relationship_nodes_entity_form_display_alter(EntityFormDisplay &$display, $context) {
  $info_service = \Drupal::service('relationship_nodes.relationship_info_service');
  if(!$info_service->allConfigAvailable()) {
    return;
  }

  if($context['form_mode'] != $info_service->getRelationshipFormMode() || !str_starts_with($context['bundle'], $info_service->getRelationshipNodeBundlePrefix())) {
    return;
  }
  
  foreach ($display->getComponents() as $field_name => $component) {
    if ($field_name == $info_service->getRelationshipTypeField() && $component['type'] == 'options_select') {
      $updated_component = $component;
      $updated_component['type'] = 'mirror_select_widget';
      $display->setComponent($field_name, $updated_component);
    }
  }
}



function relationship_nodes_entity_type_build(array &$entity_types) {
  if (isset($entity_types['node'])) {
    $entity_types['node']->setHandlerClass('inline_form', MirrorRelationshipEntityInlineForm::class);
  }
}



function relationship_nodes_form_alter(array &$form, FormStateInterface $form_state) {
  $form_object = $form_state->getFormObject();
  if(!$form_object instanceof EntityForm || $form_state->getBuildInfo()['base_form_id'] != 'node_form'){
    return;
  }
  
  $form_entity = $form_object->getEntity();
  if(!$form_entity instanceof EntityInterface){
    return;
  }
  
  $ief_widget_state = $form_state->get('inline_entity_form') ?? null;
  if($ief_widget_state != null && is_array($ief_widget_state) && count($ief_widget_state) > 0){  
     
    $relationship_iefs = false;
    foreach($ief_widget_state as $field_name => $form_data){
      if(str_starts_with($field_name, 'computed_relationshipfield__')){
        $relationship_iefs = true;   
        $i = 0;
        for($form[$field_name]['widget']; isset($form[$field_name]['widget'][$i]); $i++){
          if(!isset($form[$field_name]['widget'][$i]['inline_entity_form'])) {
            continue;
          }
          $form[$field_name]['widget'][$i]['inline_entity_form']['#parent_field_name'] = $field_name;
        }
      }
    }

    if(!$relationship_iefs) {
      return;
    } 

    if($form_entity->isNew()){
      ElementSubmit::attach($form, $form_state);
      $form['#ief_element_submit'][] = [MirrorRelationshipEntityInlineForm::class, 'getCreatedRelationIds'];
      $form['actions']['submit']['#submit'][] = 'create_relations_on_insert';
    } else{
      $form['actions']['submit']['#submit'][] = 'delete_relations_on_submit';
    } 
  }
}



function relationship_nodes_node_presave(\Drupal\Core\Entity\EntityInterface $entity) {
  $info_service = \Drupal::service('relationship_nodes.relationship_info_service');
  if(strpos($entity->getType(), $info_service->getRelationshipNodeBundlePrefix()) === 0) {
    $related_entities = [];
    $node_storage = \Drupal::entityTypeManager()->getStorage('node');
    foreach($info_service->getRelatedEntityFields() as $related_entity_field){
      if($entity->$related_entity_field != null){
        if($entity->$related_entity_field->target_id != null){
          $related_entities[] = $node_storage->load($entity->$related_entity_field->target_id)->getTitle() ;
        }
      }
    }
    $entity->set('title','Relationship ' . implode(' - ', $related_entities));
  }
}



function relationship_nodes_taxonomy_term_delete($entity) {
  setMirrorTermLink($entity, 'delete');
}



function relationship_nodes_taxonomy_term_insert($entity) {
  setMirrorTermLink($entity, 'insert');
}



function relationship_nodes_taxonomy_term_update($entity) {
  setMirrorTermLink($entity, 'update');
}



function create_relations_on_insert(array &$form, FormStateInterface $form_state) {
  $relationship_ids = $form_state->get('created_relation_ids');
  $parent_node = $form_state->getFormObject()->getEntity();
  if(!is_array($relationship_ids) || empty($relationship_ids) || !$parent_node instanceof EntityInterface) {
    return;   
  }
  $node_storage = \Drupal::entityTypeManager()->getStorage('node');
  foreach ($relationship_ids as $relationship_id => $relationship_field) {
    $related_node = $node_storage->load($relationship_id);
    if ($related_node instanceof EntityInterface) {
      $related_node->set($relationship_field, [['target_id' => $parent_node->id()]]);
      $related_node->save();
    }
  } 
}



function delete_relations_on_submit(array &$form, FormStateInterface $form_state) {
  $ief_widget_state = $form_state->get('inline_entity_form') ?? null;
  if (!$form_state instanceof FormStateInterface ||  $ief_widget_state == null) {
    return; 
  }
  
  $form_object = $form_state->getFormObject();
  if(!$form_object instanceof EntityForm || $form_state->getBuildInfo()['base_form_id'] != 'node_form'){
    return;
  }
  
  $form_entity = $form_object->getEntity();
  if(!$form_entity instanceof EntityInterface){
    return;
  }

  $start_relations = [];
  $current_relations = [];
  foreach($ief_widget_state as $field_name => $form_data){
    if(str_starts_with($field_name, 'computed_relationshipfield__') && $form_entity->hasField($field_name)){
      $items = $form_entity->get($field_name);
      if($items instanceof ReferencingRelationshipItemList){
        $db_relations = ReferencingRelationshipItemList::getRelations($items);
        if(is_array($db_relations) && !empty($db_relations)){
          $start_relations = array_merge($start_relations, array_keys($db_relations));
        }
        foreach($items->getValue() as $field_results) {
          foreach($field_results as $itemValue) {
             $current_relations[] = intval($itemValue); 
          }
        }
      }
    }
  }

  sort($start_relations);
  sort($current_relations);
  
  if(empty($start_relations) || $start_relations == $current_relations) {
    return;
  }

  $storage = \Drupal::entityTypeManager()->getStorage('node');
  foreach($start_relations as $relation_id) {
    if(!in_array($relation_id, $current_relations)){
      $relation_node = $storage->load($relation_id);
      if($relation_node instanceof EntityInterface){
        $relation_node->delete();
      }
    }
  }
}



function cleanEmptyRelationFields(array &$form, FormStateInterface $form_state) {
  $info_service = \Drupal::service('relationship_nodes.relationship_info_service');
  if(!$info_service->allConfigAvailable()) {
    return;
  }

  $ief_widget_state = $form_state->get('inline_entity_form') ?? null;
  if($ief_widget_state == null || !is_array($ief_widget_state) || count($ief_widget_state) == 0) {
    return;
  }
  
  foreach($ief_widget_state as $field_name => $fs_field_ief_input){
    if(str_starts_with($field_name, 'computed_relationshipfield__') && is_array( $fs_field_ief_input) && isset( $fs_field_ief_input['entities']) && is_array( $fs_field_ief_input['entities']) && count( $fs_field_ief_input['entities']) > 0) {
      $fs_field_values = $form_state->getValue($field_name);
      $valid_items = 0;
      $i = 0;
      for($fs_field_values; isset($fs_field_values[$i]); $i++) {
        $ief = $fs_field_values[$i]['inline_entity_form'];
        $valid_fields = 0;
        foreach($info_service->getRelatedEntityFields() as $related_entity_field) { 
          foreach($ief[$related_entity_field] as $reference) {
            if($reference['target_id'] != null) {
              $valid_fields++;
              break;
            }
          }
          if($valid_fields > 0) {
            break;
          }
        }
        if($valid_fields > 0) {
          $valid_items++;
          break;
        }   
      }
      if($valid_items == 0) {
        $form_state->setValue($field_name, []);
        $form_state->set(['inline_entity_form', $field_name], []);
        $form_state->set(['inline_entity_form',$field_name,'entities'], []);
      } 
    } 
  }   
}



function setMirrorTermLink($entity, $hook){
  $relationship_type_vocabulary_info = \Drupal::service('relationship_nodes.relationship_info_service')->relationshipTaxonomyVocabularyInfo($entity->bundle());
  if(isset($relationship_type_vocabulary_info['relationtypevocabulary'])){
    $mirror_reference_field_type = isset($relationship_type_vocabulary_info['mirrorfieldtype']) ? $relationship_type_vocabulary_info['mirrorfieldtype'] : '';
    if($mirror_reference_field_type == 'entity_reference_selfreferencing'){
      $info_service = \Drupal::service('relationship_nodes.relationship_info_service');
      $mirror_reference_field = $info_service->getMirrorFields()['mirror_reference_field'];
      $mirror_id = $entity->$mirror_reference_field->target_id;
      $original_mirror_id = null;
      $term_id = null;
      if($hook != 'delete'){
        $term_id = $entity->id();
        if ($entity->original){
          $original_mirror_id = $entity->original->$mirror_reference_field->target_id;
        }
      } 
      if($mirror_id != $original_mirror_id){
        $taxonomy_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
        if($mirror_id == null){
          $original_mirror_term = $taxonomy_storage->load($original_mirror_id);
          if($original_mirror_term){
            $original_mirror_term->$mirror_reference_field->target_id = null;
            $original_mirror_term->save();
          }
        } else if ($original_mirror_id == null){
          $mirror_term = $taxonomy_storage->load($mirror_id);
          $mirror_term->$mirror_reference_field->target_id = $term_id;
          $mirror_term->save();
        } else{
          $original_mirror_term = $taxonomy_storage->load($original_mirror_id);
          $original_mirror_term->$mirror_reference_field->target_id = null;      
          $original_mirror_term->save();
          $mirror_term = $taxonomy_storage->load($mirror_id);
          $mirror_term->$mirror_reference_field->target_id = $term_id;
          $mirror_term->save();
        }
      }
    } 
  }
}