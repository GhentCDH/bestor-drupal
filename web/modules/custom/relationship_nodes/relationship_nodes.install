<?php

function relationship_nodes_requirements($phase) {
    $requirements = [];

    if ($phase == 'install' || $phase == 'runtime') {
        try {
            if (\Drupal::hasService('relationship_nodes.relation_bundle_validator')) {
                $bundleValidator = \Drupal::service('relationship_nodes.relation_bundle_validator');
                $validation_errors = $bundleValidator->validateAllRelationConfig();
                
                if (!empty($validation_errors)) {
                    $requirements['relationship_nodes_config'] = [
                        'title' => t('Relationship Nodes Configuration'),
                        'value' => t('Configuration validation failed'),
                        'description' => [
                        '#theme' => 'item_list',
                        '#title' => t('The following configuration issues must be resolved:'),
                        '#items' => $validation_errors,
                        ],
                        'severity' => REQUIREMENT_ERROR,
                    ];
                } else {
                    $requirements['relationship_nodes_config'] = [
                        'title' => t('Relationship Nodes Configuration'),
                        'value' => t('Configuration validated successfully'),
                        'severity' => REQUIREMENT_OK,
                    ];
                }
            }
        } catch (Exception $e) {
            $requirements['relationship_nodes_config'] = [
                'title' => t('Relationship Nodes Configuration'),
                'value' => t('Validation failed'),
                'description' => t('Error during validation: @error', ['@error' => $e->getMessage()]),
                'severity' => REQUIREMENT_ERROR,
            ];
        }
    }
    return $requirements;
}


function relationship_nodes_install($is_syncing) {
  if ($is_syncing) {
    $bundleInfoService = \Drupal::service('relationship_nodes.relation_bundle_info_service');
    $fieldConfigurator = \Drupal::service('relationship_nodes.relation_field_configurator');

    foreach ($bundleInfoService->getAllRelationEntityTypes() as $entity) {
      $fieldConfigurator->implementFieldUpdates($entity);
    }
  }
}


function relationship_nodes_uninstall($is_syncing){
    $cleanupService = \Drupal::service('relationship_nodes.relation_settings_cleanup_service');
    $cleanupService->cleanupModuleData();
}